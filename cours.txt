Un peu de théorie puis le projet à rendre vendredi
cours : selon l'avancement
Projet : étapes à valider avant de continuer

Stateful et stateless
En lien avec la session HTTP (zone mémoire partagée entre le serveur et le client, unique à chaque client)
Stateful (avant les API) : on stocke le fait que le client est connecté dans la session et on passe apr la session pour envoyer les informations au clients
	Servlet : en java la classe qui gère les appels avec le protocole (spring génère ces servlets à partir de votre code)
Stateless : on ne sert jamais de la session HTTP => API, auth principalement par JWT
	Beaucoup utilisé en archi microservice (on découpe notre appli en plein de petites applis, utilisé pour uen meilleur gestion de la scalabité)
	

Monde du Java
	Version officielle Jakarta : lib Jersey (beurk)
	Version Spring
	Spring qui guide les évolutions de Jakarta et non pas l'inverse

Jersey : api avec une entité sans repo ni service

Philosophie de Spring (qui vient du pattern DataAccessObject)
Toutes classes qui fait du traitement (appel à la base, service, etc...) doit implémenter une interface => équivalent List<> l = new ArrayList();
=> maintenance du code même si l'écriture devient beaucoup plus longue

Architecture API Spring
Packages
	entities : données
		Spring Data équivalent JPA ou Hibernate
	repositories : requête à la DB
		Merci spring de tout générer facilement
		on peut aussi faire nos propres requêtes
		on peut aussi faire le repo en classe et non interface (démo, pas demandé dans le projet)
	services : récupère les données et fait les calculs/transfomation nécessaire
	controllers : déclare les routes et récupère les données des services
		Réponse HTTP dite "sale" vs les "propres"
	config : configuration de sécurité de l'appli

Gestion des erreurs avec spring
Exception de Java et de spring => problème de code, on les laisse tranquille
Exception business : ex Pas de données trouvés
	Création nos propres exception
	Création un gestionnaire d'exception de spring : si exception, il retourne la bonne reponse http
	On lance l'exception dans le service pour ne pas changer le controlleur
		le controlleur est exposé => moisn d'info possible dans le controlleur
		chaque méthode deux lignes : juste le return ResponseEntity
	Warning : les exceptions peuvent être gérées dans les controlleurs

DTO : le fait d'envoyer des objet différents des entités dans le controlleur
	but : réduire les attributs de classes
	Obligatoire : pour les utilisateurs loggés
	bonne pratique pour "cacher" les entités aux autres programmes
	
Documentation de l'API : openapi et swagger
le front est généré automatiquement :)
on doit juste annoter notre code
Dépendance
 <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.3.0</version>
   </dependency>

Configurer la doc application.properties
# url de votre doc
springdoc.api-docs.path=/doc
# accepter l'introspection de code
spring.main.allow-circular-references=true

Configurer swagger
@EnableWebMvc
@Configuration
public class Config implements WebMvcConfigurer {

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/swagger-ui/**").addResourceLocations("classpath:/META-INF/resources/swagger-ui.html");
        registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/");
    }

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**").allowedOrigins("*").allowedMethods("*");
    }

    @Bean
    public InternalResourceViewResolver defaultViewResolver() {
        return new InternalResourceViewResolver();
    }

}

Annotations pour générer la doc
Sur la classe contenant le main
	@OpenAPIDefinition(info = @Info(title = "Book API", version = "1.0", description = "Book Information
Sur les attributs des entités ou dto 
	@Schema(description = "description", example = "one example”, required = true) pour chaque attribut
Sur les controlleurs
	sur la classe @Tag(name = "book", description = "the book API")
	pour chaque route
		@Operation(summary = "View a list of available products", description = "toto") pour une route, sa description
		@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "toto"),
			@ApiResponse(responseCode = "200", description = "Successfully retrieve"),
		}
	) 
	et plour chaque@@PathVariable: @Parameter(description = "id of the books")

Accéder à la doc
http://localhost:8080/swagger-ui/index.html et mettre /doc dans l'input

Tests unitaires

Tests des routes

Rôles et permissions

Si on le temps, spring reactive