Un peu de théorie puis le projet à rendre vendredi
cours : selon l'avancement
Projet : étapes à valider avant de continuer

Stateful et stateless
En lien avec la session HTTP (zone mémoire partagée entre le serveur et le client, unique à chaque client)
Stateful (avant les API) : on stocke le fait que le client est connecté dans la session et on passe apr la session pour envoyer les informations au clients
	Servlet : en java la classe qui gère les appels avec le protocole (spring génère ces servlets à partir de votre code)
Stateless : on ne sert jamais de la session HTTP => API, auth principalement par JWT
	Beaucoup utilisé en archi microservice (on découpe notre appli en plein de petites applis, utilisé pour uen meilleur gestion de la scalabité)
	

Monde du Java
	Version officielle Jakarta : lib Jersey (beurk)
	Version Spring
	Spring qui guide les évolutions de Jakarta et non pas l'inverse

Jersey : api avec une entité sans repo ni service

Architecture API Spring
Packages
	entities : données
		Spring Data équivalent JPA ou Hibernate
	repositories : requête à la DB
		Merci spring de tout générer facilement
		on peut aussi faire nos propres requêtes
		on peut aussi faire le repo en classe et non interface (démo, pas demandé dans le projet)
	services : récupère les données et fait les calculs/transfomation nécessaire
	controllers : déclare les routes et récupère les données des services
		Réponse HTTP dite "sale" vs les "propres"
	config : configuration de sécurité de l'appli

Gestion des erreurs avec spring

Documentation de l'API

Tests unitaires

Tests des routes

Rôles et permissions

Si on le temps, spring reactive